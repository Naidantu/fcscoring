// Generated by rstantools.  Do not edit by hand.

/*
    fcscoring is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    fcscoring is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with fcscoring.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_GTUMpoly_triplet_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_GTUMpoly_triplet");
    reader.add_event(119, 117, "end", "model_GTUMpoly_triplet");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
GFCU(const int& y,
         const T1__& theta1,
         const T2__& theta2,
         const T3__& alpha1,
         const T4__& alpha2,
         const T5__& delta1,
         const T6__& delta2,
         const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& tau,
         const T8__& blockrandomness, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        local_scalar_t__ t1(DUMMY_VAR__);
        (void) t1;  // dummy to suppress unused var warning
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);
        current_statement_begin__ = 11;
        local_scalar_t__ t2(DUMMY_VAR__);
        (void) t2;  // dummy to suppress unused var warning
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);
        current_statement_begin__ = 13;
        stan::math::assign(t1, -(stan::math::fabs((alpha1 * (theta1 - delta1)))));
        current_statement_begin__ = 14;
        stan::math::assign(t2, -(stan::math::fabs((alpha2 * (theta2 - delta2)))));
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ordered_logistic_log(y, ((t1 - t2) + blockrandomness), tau));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct GFCU_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
    operator()(const int& y,
         const T1__& theta1,
         const T2__& theta2,
         const T3__& alpha1,
         const T4__& alpha2,
         const T5__& delta1,
         const T6__& delta2,
         const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& tau,
         const T8__& blockrandomness, std::ostream* pstream__) const {
        return GFCU(y, theta1, theta2, alpha1, alpha2, delta1, delta2, tau, blockrandomness, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_GTUMpoly_triplet
  : public stan::model::model_base_crtp<model_GTUMpoly_triplet> {
private:
        int Categ;
        int Items;
        int Subjt;
        int Trait;
        int Block;
        int N;
        int N_mis;
        std::vector<int> II;
        std::vector<int> JJ;
        std::vector<int> y;
        vector_d Theta_mu;
        vector_d Delta_Ind;
        vector_d Delta_Std;
        std::vector<int> Dime_Ind;
        std::vector<int> Item_Ind;
        vector_d Delta_lower;
        vector_d Delta_upper;
        double ma;
        double va;
        double mt;
        double vt;
public:
    model_GTUMpoly_triplet(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_GTUMpoly_triplet(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_GTUMpoly_triplet_namespace::model_GTUMpoly_triplet";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "Categ", "int", context__.to_vec());
            Categ = int(0);
            vals_i__ = context__.vals_i("Categ");
            pos__ = 0;
            Categ = vals_i__[pos__++];
            check_greater_or_equal(function__, "Categ", Categ, 1);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "Items", "int", context__.to_vec());
            Items = int(0);
            vals_i__ = context__.vals_i("Items");
            pos__ = 0;
            Items = vals_i__[pos__++];
            check_greater_or_equal(function__, "Items", Items, 1);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "Subjt", "int", context__.to_vec());
            Subjt = int(0);
            vals_i__ = context__.vals_i("Subjt");
            pos__ = 0;
            Subjt = vals_i__[pos__++];
            check_greater_or_equal(function__, "Subjt", Subjt, 1);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "Trait", "int", context__.to_vec());
            Trait = int(0);
            vals_i__ = context__.vals_i("Trait");
            pos__ = 0;
            Trait = vals_i__[pos__++];
            check_greater_or_equal(function__, "Trait", Trait, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "Block", "int", context__.to_vec());
            Block = int(0);
            vals_i__ = context__.vals_i("Block");
            pos__ = 0;
            Block = vals_i__[pos__++];
            check_greater_or_equal(function__, "Block", Block, 2);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "N_mis", "int", context__.to_vec());
            N_mis = int(0);
            vals_i__ = context__.vals_i("N_mis");
            pos__ = 0;
            N_mis = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_mis", N_mis, 0);
            current_statement_begin__ = 29;
            validate_non_negative_index("II", "N", N);
            context__.validate_dims("data initialization", "II", "int", context__.to_vec(N));
            II = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("II");
            pos__ = 0;
            size_t II_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < II_k_0_max__; ++k_0__) {
                II[k_0__] = vals_i__[pos__++];
            }
            size_t II_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < II_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "II[i_0__]", II[i_0__], 1);
                check_less_or_equal(function__, "II[i_0__]", II[i_0__], Items);
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("JJ", "N", N);
            context__.validate_dims("data initialization", "JJ", "int", context__.to_vec(N));
            JJ = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("JJ");
            pos__ = 0;
            size_t JJ_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < JJ_k_0_max__; ++k_0__) {
                JJ[k_0__] = vals_i__[pos__++];
            }
            size_t JJ_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < JJ_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "JJ[i_0__]", JJ[i_0__], 1);
                check_less_or_equal(function__, "JJ[i_0__]", JJ[i_0__], Subjt);
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 1);
                check_less_or_equal(function__, "y[i_0__]", y[i_0__], Categ);
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("Theta_mu", "Trait", Trait);
            context__.validate_dims("data initialization", "Theta_mu", "vector_d", context__.to_vec(Trait));
            Theta_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(Trait);
            vals_r__ = context__.vals_r("Theta_mu");
            pos__ = 0;
            size_t Theta_mu_j_1_max__ = Trait;
            for (size_t j_1__ = 0; j_1__ < Theta_mu_j_1_max__; ++j_1__) {
                Theta_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("Delta_Ind", "Items", Items);
            context__.validate_dims("data initialization", "Delta_Ind", "vector_d", context__.to_vec(Items));
            Delta_Ind = Eigen::Matrix<double, Eigen::Dynamic, 1>(Items);
            vals_r__ = context__.vals_r("Delta_Ind");
            pos__ = 0;
            size_t Delta_Ind_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < Delta_Ind_j_1_max__; ++j_1__) {
                Delta_Ind(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("Delta_Std", "Items", Items);
            context__.validate_dims("data initialization", "Delta_Std", "vector_d", context__.to_vec(Items));
            Delta_Std = Eigen::Matrix<double, Eigen::Dynamic, 1>(Items);
            vals_r__ = context__.vals_r("Delta_Std");
            pos__ = 0;
            size_t Delta_Std_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < Delta_Std_j_1_max__; ++j_1__) {
                Delta_Std(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("Dime_Ind", "(2 * Items)", (2 * Items));
            context__.validate_dims("data initialization", "Dime_Ind", "int", context__.to_vec((2 * Items)));
            Dime_Ind = std::vector<int>((2 * Items), int(0));
            vals_i__ = context__.vals_i("Dime_Ind");
            pos__ = 0;
            size_t Dime_Ind_k_0_max__ = (2 * Items);
            for (size_t k_0__ = 0; k_0__ < Dime_Ind_k_0_max__; ++k_0__) {
                Dime_Ind[k_0__] = vals_i__[pos__++];
            }
            size_t Dime_Ind_i_0_max__ = (2 * Items);
            for (size_t i_0__ = 0; i_0__ < Dime_Ind_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Dime_Ind[i_0__]", Dime_Ind[i_0__], 1);
                check_less_or_equal(function__, "Dime_Ind[i_0__]", Dime_Ind[i_0__], Trait);
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("Item_Ind", "(2 * Items)", (2 * Items));
            context__.validate_dims("data initialization", "Item_Ind", "int", context__.to_vec((2 * Items)));
            Item_Ind = std::vector<int>((2 * Items), int(0));
            vals_i__ = context__.vals_i("Item_Ind");
            pos__ = 0;
            size_t Item_Ind_k_0_max__ = (2 * Items);
            for (size_t k_0__ = 0; k_0__ < Item_Ind_k_0_max__; ++k_0__) {
                Item_Ind[k_0__] = vals_i__[pos__++];
            }
            size_t Item_Ind_i_0_max__ = (2 * Items);
            for (size_t i_0__ = 0; i_0__ < Item_Ind_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Item_Ind[i_0__]", Item_Ind[i_0__], 1);
                check_less_or_equal(function__, "Item_Ind[i_0__]", Item_Ind[i_0__], Items);
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("Delta_lower", "Items", Items);
            context__.validate_dims("data initialization", "Delta_lower", "vector_d", context__.to_vec(Items));
            Delta_lower = Eigen::Matrix<double, Eigen::Dynamic, 1>(Items);
            vals_r__ = context__.vals_r("Delta_lower");
            pos__ = 0;
            size_t Delta_lower_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < Delta_lower_j_1_max__; ++j_1__) {
                Delta_lower(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "Delta_lower", Delta_lower, -(10));
            check_less_or_equal(function__, "Delta_lower", Delta_lower, 10);
            current_statement_begin__ = 38;
            validate_non_negative_index("Delta_upper", "Items", Items);
            context__.validate_dims("data initialization", "Delta_upper", "vector_d", context__.to_vec(Items));
            Delta_upper = Eigen::Matrix<double, Eigen::Dynamic, 1>(Items);
            vals_r__ = context__.vals_r("Delta_upper");
            pos__ = 0;
            size_t Delta_upper_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < Delta_upper_j_1_max__; ++j_1__) {
                Delta_upper(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "Delta_upper", Delta_upper, -(10));
            check_less_or_equal(function__, "Delta_upper", Delta_upper, 10);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "ma", "double", context__.to_vec());
            ma = double(0);
            vals_r__ = context__.vals_r("ma");
            pos__ = 0;
            ma = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "va", "double", context__.to_vec());
            va = double(0);
            vals_r__ = context__.vals_r("va");
            pos__ = 0;
            va = vals_r__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "mt", "double", context__.to_vec());
            mt = double(0);
            vals_r__ = context__.vals_r("mt");
            pos__ = 0;
            mt = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "vt", "double", context__.to_vec());
            vt = double(0);
            vals_r__ = context__.vals_r("vt");
            pos__ = 0;
            vt = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 48;
            validate_non_negative_index("tau", "(Categ - 1)", (Categ - 1));
            validate_non_negative_index("tau", "Items", Items);
            num_params_r__ += ((Categ - 1) * Items);
            current_statement_begin__ = 49;
            validate_non_negative_index("alpha_raw", "Items", Items);
            num_params_r__ += Items;
            current_statement_begin__ = 50;
            validate_non_negative_index("delta_raw", "Items", Items);
            num_params_r__ += Items;
            current_statement_begin__ = 51;
            validate_non_negative_index("z_trait", "Trait", Trait);
            validate_non_negative_index("z_trait", "Subjt", Subjt);
            num_params_r__ += (Trait * Subjt);
            current_statement_begin__ = 52;
            validate_non_negative_index("L_Omega", "Trait", Trait);
            validate_non_negative_index("L_Omega", "Trait", Trait);
            num_params_r__ += ((Trait * (Trait - 1)) / 2);
            current_statement_begin__ = 53;
            validate_non_negative_index("randomblock_raw", "Subjt", Subjt);
            validate_non_negative_index("randomblock_raw", "20", 20);
            num_params_r__ += (Subjt * 20);
            current_statement_begin__ = 54;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_GTUMpoly_triplet() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 48;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "(Categ - 1)", (Categ - 1));
        validate_non_negative_index("tau", "Items", Items);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(Items,(Categ - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau(Items, Eigen::Matrix<double, Eigen::Dynamic, 1>((Categ - 1)));
        size_t tau_j_1_max__ = (Categ - 1);
        size_t tau_k_0_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
                tau[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t tau_i_0_max__ = Items;
        for (size_t i_0__ = 0; i_0__ < tau_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(tau[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "Items", Items);
        context__.validate_dims("parameter initialization", "alpha_raw", "vector_d", context__.to_vec(Items));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw(Items);
        size_t alpha_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            alpha_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0.1, 5, alpha_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("delta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_raw");
        pos__ = 0U;
        validate_non_negative_index("delta_raw", "Items", Items);
        context__.validate_dims("parameter initialization", "delta_raw", "vector_d", context__.to_vec(Items));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw(Items);
        size_t delta_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            delta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, delta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("z_trait")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_trait missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_trait");
        pos__ = 0U;
        validate_non_negative_index("z_trait", "Trait", Trait);
        validate_non_negative_index("z_trait", "Subjt", Subjt);
        context__.validate_dims("parameter initialization", "z_trait", "matrix_d", context__.to_vec(Trait,Subjt));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_trait(Trait, Subjt);
        size_t z_trait_j_2_max__ = Subjt;
        size_t z_trait_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < z_trait_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_trait_j_1_max__; ++j_1__) {
                z_trait(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_trait);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_trait: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("L_Omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "Trait", Trait);
        validate_non_negative_index("L_Omega", "Trait", Trait);
        context__.validate_dims("parameter initialization", "L_Omega", "matrix_d", context__.to_vec(Trait,Trait));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega(Trait, Trait);
        size_t L_Omega_j_2_max__ = Trait;
        size_t L_Omega_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                L_Omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("randomblock_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable randomblock_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("randomblock_raw");
        pos__ = 0U;
        validate_non_negative_index("randomblock_raw", "Subjt", Subjt);
        validate_non_negative_index("randomblock_raw", "20", 20);
        context__.validate_dims("parameter initialization", "randomblock_raw", "matrix_d", context__.to_vec(Subjt,20));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> randomblock_raw(Subjt, 20);
        size_t randomblock_raw_j_2_max__ = 20;
        size_t randomblock_raw_j_1_max__ = Subjt;
        for (size_t j_2__ = 0; j_2__ < randomblock_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < randomblock_raw_j_1_max__; ++j_1__) {
                randomblock_raw(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(randomblock_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable randomblock_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("randomblock_var")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable randomblock_var missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("randomblock_var");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "randomblock_var", "double", context__.to_vec());
        double randomblock_var(0);
        randomblock_var = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0.01, 5, randomblock_var);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable randomblock_var: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 48;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > tau;
            size_t tau_d_0_max__ = Items;
            tau.reserve(tau_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tau_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tau.push_back(in__.ordered_constrain((Categ - 1), lp__));
                else
                    tau.push_back(in__.ordered_constrain((Categ - 1)));
            }
            current_statement_begin__ = 49;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.vector_lub_constrain(0.1, 5, Items, lp__);
            else
                alpha_raw = in__.vector_lub_constrain(0.1, 5, Items);
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_raw;
            (void) delta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_raw = in__.vector_lub_constrain(0, 1, Items, lp__);
            else
                delta_raw = in__.vector_lub_constrain(0, 1, Items);
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_trait;
            (void) z_trait;  // dummy to suppress unused var warning
            if (jacobian__)
                z_trait = in__.matrix_constrain(Trait, Subjt, lp__);
            else
                z_trait = in__.matrix_constrain(Trait, Subjt);
            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_factor_corr_constrain(Trait, lp__);
            else
                L_Omega = in__.cholesky_factor_corr_constrain(Trait);
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> randomblock_raw;
            (void) randomblock_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                randomblock_raw = in__.matrix_constrain(Subjt, 20, lp__);
            else
                randomblock_raw = in__.matrix_constrain(Subjt, 20);
            current_statement_begin__ = 54;
            local_scalar_t__ randomblock_var;
            (void) randomblock_var;  // dummy to suppress unused var warning
            if (jacobian__)
                randomblock_var = in__.scalar_lub_constrain(0.01, 5, lp__);
            else
                randomblock_var = in__.scalar_lub_constrain(0.01, 5);
            // transformed parameters
            current_statement_begin__ = 60;
            validate_non_negative_index("theta", "Subjt", Subjt);
            validate_non_negative_index("theta", "Trait", Trait);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta(Subjt, Trait);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("alpha", "(Items * 2)", (Items * 2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha((Items * 2));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("delta", "(Items * 2)", (Items * 2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta((Items * 2));
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("randomblock", "Subjt", Subjt);
            validate_non_negative_index("randomblock", "Items", Items);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> randomblock(Subjt, Items);
            stan::math::initialize(randomblock, DUMMY_VAR__);
            stan::math::fill(randomblock, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("delta_1", "Items", Items);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_1(Items);
            stan::math::initialize(delta_1, DUMMY_VAR__);
            stan::math::fill(delta_1, DUMMY_VAR__);
            stan::math::assign(delta_1,add(Delta_lower, elt_multiply(subtract(Delta_upper, Delta_lower), delta_raw)));
            // transformed parameters block statements
            current_statement_begin__ = 65;
            stan::math::assign(theta, transpose(multiply(L_Omega, z_trait)));
            current_statement_begin__ = 67;
            for (int i = 1; i <= 20; ++i) {
                current_statement_begin__ = 71;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 72;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 73;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 75;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 1), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 76;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 1), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 77;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 2), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 79;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 1)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 2), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 80;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 2)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 3), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 81;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 3)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 3), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 83;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 1), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 84;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 1), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 85;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 2), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 87;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 1)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 2), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 88;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 2)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 3), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 89;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 3)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 3), "delta_1", 1), 
                            "assigning variable delta");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 60;
            size_t theta_j_1_max__ = Subjt;
            size_t theta_j_2_max__ = Trait;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(theta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 61;
            size_t alpha_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha", alpha, 0.1);
            check_less_or_equal(function__, "alpha", alpha, 5);
            current_statement_begin__ = 62;
            size_t delta_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 63;
            size_t randomblock_j_1_max__ = Subjt;
            size_t randomblock_j_2_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < randomblock_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < randomblock_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(randomblock(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: randomblock" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable randomblock: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 64;
            size_t delta_1_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < delta_1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta_1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta_1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 97;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, 1));
            current_statement_begin__ = 98;
            lp_accum__.add(lognormal_log<propto__>(alpha_raw, ma, va));
            current_statement_begin__ = 99;
            lp_accum__.add(lognormal_log<propto__>(randomblock_var, 0, 1));
            current_statement_begin__ = 101;
            for (int i = 1; i <= Items; ++i) {
                current_statement_begin__ = 102;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(tau, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "tau"), mt, vt));
            }
            current_statement_begin__ = 105;
            lp_accum__.add(normal_log<propto__>(delta_1, Delta_Ind, Delta_Std));
            current_statement_begin__ = 106;
            lp_accum__.add(normal_log<propto__>(to_vector(z_trait), 0, 1));
            current_statement_begin__ = 107;
            lp_accum__.add(normal_log<propto__>(to_vector(randomblock_raw), 0, randomblock_var));
            current_statement_begin__ = 109;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 110;
                lp_accum__.add(GFCU(get_base1(y, n, "y", 1), get_base1(theta, get_base1(JJ, n, "JJ", 1), get_base1(Dime_Ind, get_base1(II, n, "II", 1), "Dime_Ind", 1), "theta", 1), get_base1(theta, get_base1(JJ, n, "JJ", 1), get_base1(Dime_Ind, (60 + get_base1(II, n, "II", 1)), "Dime_Ind", 1), "theta", 1), get_base1(alpha, get_base1(II, n, "II", 1), "alpha", 1), get_base1(alpha, (get_base1(II, n, "II", 1) + 60), "alpha", 1), get_base1(delta, get_base1(II, n, "II", 1), "delta", 1), get_base1(delta, (get_base1(II, n, "II", 1) + 60), "delta", 1), stan::model::rvalue(tau, stan::model::cons_list(stan::model::index_uni(get_base1(II, n, "II", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "tau"), get_base1(randomblock, get_base1(JJ, n, "JJ", 1), get_base1(II, n, "II", 1), "randomblock", 1), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau");
        names__.push_back("alpha_raw");
        names__.push_back("delta_raw");
        names__.push_back("z_trait");
        names__.push_back("L_Omega");
        names__.push_back("randomblock_raw");
        names__.push_back("randomblock_var");
        names__.push_back("theta");
        names__.push_back("alpha");
        names__.push_back("delta");
        names__.push_back("randomblock");
        names__.push_back("delta_1");
        names__.push_back("Cor");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Items);
        dims__.push_back((Categ - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Items);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Items);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Trait);
        dims__.push_back(Subjt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Trait);
        dims__.push_back(Trait);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Subjt);
        dims__.push_back(20);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Subjt);
        dims__.push_back(Trait);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Items * 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Items * 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Subjt);
        dims__.push_back(Items);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Items);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Trait);
        dims__.push_back(Trait);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_GTUMpoly_triplet_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > tau;
        size_t tau_d_0_max__ = Items;
        tau.reserve(tau_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tau_d_0_max__; ++d_0__) {
            tau.push_back(in__.ordered_constrain((Categ - 1)));
        }
        size_t tau_j_1_max__ = (Categ - 1);
        size_t tau_k_0_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
                vars__.push_back(tau[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw = in__.vector_lub_constrain(0.1, 5, Items);
        size_t alpha_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw = in__.vector_lub_constrain(0, 1, Items);
        size_t delta_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(delta_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_trait = in__.matrix_constrain(Trait, Subjt);
        size_t z_trait_j_2_max__ = Subjt;
        size_t z_trait_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < z_trait_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_trait_j_1_max__; ++j_1__) {
                vars__.push_back(z_trait(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega = in__.cholesky_factor_corr_constrain(Trait);
        size_t L_Omega_j_2_max__ = Trait;
        size_t L_Omega_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> randomblock_raw = in__.matrix_constrain(Subjt, 20);
        size_t randomblock_raw_j_2_max__ = 20;
        size_t randomblock_raw_j_1_max__ = Subjt;
        for (size_t j_2__ = 0; j_2__ < randomblock_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < randomblock_raw_j_1_max__; ++j_1__) {
                vars__.push_back(randomblock_raw(j_1__, j_2__));
            }
        }
        double randomblock_var = in__.scalar_lub_constrain(0.01, 5);
        vars__.push_back(randomblock_var);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 60;
            validate_non_negative_index("theta", "Subjt", Subjt);
            validate_non_negative_index("theta", "Trait", Trait);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(Subjt, Trait);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("alpha", "(Items * 2)", (Items * 2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((Items * 2));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("delta", "(Items * 2)", (Items * 2));
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta((Items * 2));
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("randomblock", "Subjt", Subjt);
            validate_non_negative_index("randomblock", "Items", Items);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> randomblock(Subjt, Items);
            stan::math::initialize(randomblock, DUMMY_VAR__);
            stan::math::fill(randomblock, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("delta_1", "Items", Items);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta_1(Items);
            stan::math::initialize(delta_1, DUMMY_VAR__);
            stan::math::fill(delta_1, DUMMY_VAR__);
            stan::math::assign(delta_1,add(Delta_lower, elt_multiply(subtract(Delta_upper, Delta_lower), delta_raw)));
            // do transformed parameters statements
            current_statement_begin__ = 65;
            stan::math::assign(theta, transpose(multiply(L_Omega, z_trait)));
            current_statement_begin__ = 67;
            for (int i = 1; i <= 20; ++i) {
                current_statement_begin__ = 71;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 72;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 73;
                stan::model::assign(randomblock, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list())), 
                            stan::model::rvalue(randomblock_raw, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "randomblock_raw"), 
                            "assigning variable randomblock");
                current_statement_begin__ = 75;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 1), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 76;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 1), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 77;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 2), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 79;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 1)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 2), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 80;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 2)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 3), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 81;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 3)), stan::model::nil_index_list()), 
                            get_base1(alpha_raw, (((i - 1) * 3) + 3), "alpha_raw", 1), 
                            "assigning variable alpha");
                current_statement_begin__ = 83;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 1)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 1), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 84;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 2)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 1), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 85;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni((((i - 1) * 3) + 3)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 2), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 87;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 1)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 2), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 88;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 2)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 3), "delta_1", 1), 
                            "assigning variable delta");
                current_statement_begin__ = 89;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(((((i - 1) * 3) + Items) + 3)), stan::model::nil_index_list()), 
                            get_base1(delta_1, (((i - 1) * 3) + 3), "delta_1", 1), 
                            "assigning variable delta");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 61;
            check_greater_or_equal(function__, "alpha", alpha, 0.1);
            check_less_or_equal(function__, "alpha", alpha, 5);
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_2_max__ = Trait;
                size_t theta_j_1_max__ = Subjt;
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                        vars__.push_back(theta(j_1__, j_2__));
                    }
                }
                size_t alpha_j_1_max__ = (Items * 2);
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                size_t delta_j_1_max__ = (Items * 2);
                for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                    vars__.push_back(delta(j_1__));
                }
                size_t randomblock_j_2_max__ = Items;
                size_t randomblock_j_1_max__ = Subjt;
                for (size_t j_2__ = 0; j_2__ < randomblock_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < randomblock_j_1_max__; ++j_1__) {
                        vars__.push_back(randomblock(j_1__, j_2__));
                    }
                }
                size_t delta_1_j_1_max__ = Items;
                for (size_t j_1__ = 0; j_1__ < delta_1_j_1_max__; ++j_1__) {
                    vars__.push_back(delta_1(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 115;
            validate_non_negative_index("Cor", "Trait", Trait);
            validate_non_negative_index("Cor", "Trait", Trait);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Cor(Trait, Trait);
            stan::math::initialize(Cor, DUMMY_VAR__);
            stan::math::fill(Cor, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 116;
            stan::math::assign(Cor, multiply_lower_tri_self_transpose(L_Omega));
            // validate, write generated quantities
            current_statement_begin__ = 115;
            size_t Cor_j_2_max__ = Trait;
            size_t Cor_j_1_max__ = Trait;
            for (size_t j_2__ = 0; j_2__ < Cor_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Cor_j_1_max__; ++j_1__) {
                    vars__.push_back(Cor(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_GTUMpoly_triplet";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t tau_j_1_max__ = (Categ - 1);
        size_t tau_k_0_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_trait_j_2_max__ = Subjt;
        size_t z_trait_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < z_trait_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_trait_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_trait" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_2_max__ = Trait;
        size_t L_Omega_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t randomblock_raw_j_2_max__ = 20;
        size_t randomblock_raw_j_1_max__ = Subjt;
        for (size_t j_2__ = 0; j_2__ < randomblock_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < randomblock_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "randomblock_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "randomblock_var";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_2_max__ = Trait;
            size_t theta_j_1_max__ = Subjt;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t alpha_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t randomblock_j_2_max__ = Items;
            size_t randomblock_j_1_max__ = Subjt;
            for (size_t j_2__ = 0; j_2__ < randomblock_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < randomblock_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "randomblock" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t delta_1_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < delta_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t Cor_j_2_max__ = Trait;
        size_t Cor_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < Cor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Cor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Cor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t tau_j_1_max__ = (Categ - 1);
        size_t tau_k_0_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < tau_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t alpha_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_raw_j_1_max__ = Items;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_trait_j_2_max__ = Subjt;
        size_t z_trait_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < z_trait_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_trait_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_trait" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_1_max__ = ((Trait * (Trait - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t randomblock_raw_j_2_max__ = 20;
        size_t randomblock_raw_j_1_max__ = Subjt;
        for (size_t j_2__ = 0; j_2__ < randomblock_raw_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < randomblock_raw_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "randomblock_raw" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "randomblock_var";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_2_max__ = Trait;
            size_t theta_j_1_max__ = Subjt;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t alpha_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = (Items * 2);
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t randomblock_j_2_max__ = Items;
            size_t randomblock_j_1_max__ = Subjt;
            for (size_t j_2__ = 0; j_2__ < randomblock_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < randomblock_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "randomblock" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t delta_1_j_1_max__ = Items;
            for (size_t j_1__ = 0; j_1__ < delta_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t Cor_j_2_max__ = Trait;
        size_t Cor_j_1_max__ = Trait;
        for (size_t j_2__ = 0; j_2__ < Cor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Cor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Cor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_GTUMpoly_triplet_namespace::model_GTUMpoly_triplet stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
